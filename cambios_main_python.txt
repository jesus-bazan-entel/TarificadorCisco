def get_zone_by_prefix(db, called_number: str) -> int:
    """
    Determina la zona bas치ndose en el prefijo del n칰mero marcado
    
    Args:
        db: Sesi칩n de base de datos
        called_number: N칰mero de destino marcado
    
    Returns:
        int: ID de la zona correspondiente, o zona por defecto si no encuentra
    """
    if not called_number:
        return 1  # Zona por defecto para n칰meros vac칤os
    
    # Limpiar el n칰mero (quitar espacios, guiones, etc.)
    clean_number = ''.join(filter(str.isdigit, called_number))
    
    if not clean_number:
        return 1  # Zona por defecto si no hay d칤gitos
    
    try:
        # Obtener todos los prefijos ordenados por longitud descendente
        # Esto prioriza prefijos m치s espec칤ficos (m치s largos) sobre los generales
        query = text("""
            SELECT zona_id, prefijo, longitud_minima, longitud_maxima
            FROM prefijos 
            ORDER BY LENGTH(prefijo) DESC, prefijo
        """)
        
        prefijos = db.execute(query).fetchall()
        
        for prefijo_row in prefijos:
            zona_id, prefijo, long_min, long_max = prefijo_row
            
            # Verificar si el n칰mero empieza con este prefijo
            if clean_number.startswith(prefijo):
                # Verificar longitud del n칰mero
                if long_min and len(clean_number) < long_min:
                    continue
                if long_max and len(clean_number) > long_max:
                    continue
                
                # 춰Encontramos la zona!
                return zona_id
        
        # Si no se encuentra ning칰n prefijo, usar zona por defecto
        print(f"丘멆잺  No se encontr칩 zona para el n칰mero: {called_number}")
        return 1  # Zona por defecto (puedes cambiar este valor)
        
    except Exception as e:
        print(f"Error determinando zona para {called_number}: {e}")
        return 1  # Zona por defecto en caso de error


# API Principal - Modificada para usar zonas y tarifas
@app.post("/cdr")
def create_cdr(event: CallEvent):
    db = SessionLocal()
    
    try:
        # 1. Determinar la zona bas치ndose en el prefijo
        zona_id = get_zone_by_prefix(db, event.called_number)
        
        # 2. Obtener la tarifa espec칤fica para esa zona
        rate_per_minute = get_rate_by_zone(db, zona_id)
        
        # 3. Calcular el costo basado en duration_billable y tarifa de la zona
        cost = (event.duration_billable / 60) * rate_per_minute
        
        # 4. Crear el CDR con la zona determinada autom치ticamente
        cdr_data = {
            "calling_number": event.calling_number,
            "called_number": event.called_number,
            "start_time": event.start_time,
            "end_time": event.end_time,
            "duration_seconds": event.duration_seconds,
            "duration_billable": event.duration_billable,
            "cost": cost,
            "status": event.status,
            "direction": event.direction,
            "release_cause": event.release_cause,
            "connect_time": event.answer_time,  # Mapear answer_time a connect_time
            "dialing_time": event.dialing_time,
            "network_reached_time": event.network_reached_time,
            "network_alerting_time": event.network_alerting_time,
            "zona_id": zona_id  # 춰Ahora se calcula autom치ticamente!
        }
        
        # 5. Guardar el CDR
        cdr = CDR(**cdr_data)
        db.add(cdr)
        
        # 6. Actualizar el saldo del anexo
        update_result = db.execute(
            text("UPDATE saldo_anexos SET saldo = saldo - :cost WHERE calling_number = :calling_number"),
            {"cost": cost, "calling_number": event.calling_number}
        )
        
        # 7. Verificar si se actualiz칩 el saldo (anexo existe)
        if update_result.rowcount == 0:
            print(f"丘멆잺  Anexo {event.calling_number} no encontrado en saldo_anexos")
            # Opcional: crear registro de saldo para el anexo
            # db.execute(
            #     text("INSERT INTO saldo_anexos (calling_number, saldo) VALUES (:calling_number, :saldo)"),
            #     {"calling_number": event.calling_number, "saldo": -cost}
            # )
        
        # 8. Verificar saldo bajo y generar alerta si es necesario
        nuevo_saldo_result = db.execute(
            text("SELECT saldo FROM saldo_anexos WHERE calling_number = :calling_number"),
            {"calling_number": event.calling_number}
        ).fetchone()
        
        if nuevo_saldo_result:
            nuevo_saldo = nuevo_saldo_result[0]
            if nuevo_saldo < 1.0:
                # TODO: Enviar alerta de saldo bajo
                print(f"游뚿 ALERTA: Anexo {event.calling_number} con saldo bajo: ${nuevo_saldo:.2f}")
                # Aqu칤 puedes programar enviar correo o alerta
        
        # 9. Confirmar transacci칩n
        db.commit()
        
        # 10. Obtener informaci칩n de la zona para logging/debugging
        zona_info = db.execute(
            text("SELECT nombre FROM zonas WHERE id = :zona_id"),
            {"zona_id": zona_id}
        ).fetchone()
        
        zona_nombre = zona_info[0] if zona_info else "Desconocida"
        
        return {
            "message": "CDR saved successfully",
            "cdr_id": cdr.id if hasattr(cdr, 'id') else None,
            "cost": round(cost, 4),
            "zona_id": zona_id,
            "zona_nombre": zona_nombre,
            "rate_per_minute": rate_per_minute,
            "duration_billed_minutes": round(event.duration_billable / 60, 4)
        }
        
    except Exception as e:
        db.rollback()
        print(f"Error creando CDR: {e}")
        raise HTTPException(status_code=500, detail=f"Error guardando CDR: {str(e)}")
    finally:
        db.close()
